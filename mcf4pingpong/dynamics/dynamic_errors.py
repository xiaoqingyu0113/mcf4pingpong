import numba
from numpy import *
@numba.jit(cache=True,nopython=True)
def pos_error(_Dummy_56, _Dummy_57, _Dummy_58, t1, t2):
    [l1_1, l1_2, l1_3] = _Dummy_56
    [v1_1, v1_2, v1_3] = _Dummy_57
    [l2_1, l2_2, l2_3] = _Dummy_58
    return array([[-l1_1 + l2_1 - v1_1*(-t1 + t2) + 1.0e-14], [-l1_2 + l2_2 - v1_2*(-t1 + t2) + 1.0e-14], [-l1_3 + l2_3 - v1_3*(-t1 + t2) + 1.0e-14]])

@numba.jit(cache=True,nopython=True)
def pos_jacobian(_Dummy_59, _Dummy_60, _Dummy_61, t1, t2):
    [l1_1, l1_2, l1_3] = _Dummy_59
    [v1_1, v1_2, v1_3] = _Dummy_60
    [l2_1, l2_2, l2_3] = _Dummy_61
    return (array([[-0.99999999999999, 1.0e-14, 1.0e-14], [1.0e-14, -0.99999999999999, 1.0e-14], [1.0e-14, 1.0e-14, -0.99999999999999]]), array([[t1 - t2 + 1.0e-14, 1.0e-14, 1.0e-14], [1.0e-14, t1 - t2 + 1.0e-14, 1.0e-14], [1.0e-14, 1.0e-14, t1 - t2 + 1.0e-14]]), array([[1.00000000000001, 1.0e-14, 1.0e-14], [1.0e-14, 1.00000000000001, 1.0e-14], [1.0e-14, 1.0e-14, 1.00000000000001]]),)

@numba.jit(cache=True,nopython=True)
def vel_error(_Dummy_62, _Dummy_63, _Dummy_64, t1, t2, _Dummy_65):
    [v1_1, v1_2, v1_3] = _Dummy_62
    [w1_1, w1_2, w1_3] = _Dummy_63
    [v2_1, v2_2, v2_3] = _Dummy_64
    [C_d, C_m] = _Dummy_65
    return array([[-v1_1 + v2_1 - (-t1 + t2)*(-C_d*v1_1*sqrt(v1_1**2 + v1_2**2 + v1_3**2) + C_m*(-v1_2*w1_3 + v1_3*w1_2)) + 1.0e-14], [-v1_2 + v2_2 - (-t1 + t2)*(-C_d*v1_2*sqrt(v1_1**2 + v1_2**2 + v1_3**2) + C_m*(v1_1*w1_3 - v1_3*w1_1)) + 1.0e-14], [-v1_3 + v2_3 - (-t1 + t2)*(-C_d*v1_3*sqrt(v1_1**2 + v1_2**2 + v1_3**2) + C_m*(-v1_1*w1_2 + v1_2*w1_1) - 9.81) + 1.0e-14]])

@numba.jit(cache=True,nopython=True)
def vel_jacobian(_Dummy_66, _Dummy_67, _Dummy_68, t1, t2, _Dummy_69):
    [v1_1, v1_2, v1_3] = _Dummy_66
    [w1_1, w1_2, w1_3] = _Dummy_67
    [v2_1, v2_2, v2_3] = _Dummy_68
    [C_d, C_m] = _Dummy_69
    return (array([[-(-t1 + t2)*(-C_d*v1_1**2/sqrt(v1_1**2 + v1_2**2 + v1_3**2) - C_d*sqrt(v1_1**2 + v1_2**2 + v1_3**2)) - 0.99999999999999, -(-t1 + t2)*(-C_d*v1_1*v1_2/sqrt(v1_1**2 + v1_2**2 + v1_3**2) - C_m*w1_3) + 1.0e-14, -(-t1 + t2)*(-C_d*v1_1*v1_3/sqrt(v1_1**2 + v1_2**2 + v1_3**2) + C_m*w1_2) + 1.0e-14], [-(-t1 + t2)*(-C_d*v1_1*v1_2/sqrt(v1_1**2 + v1_2**2 + v1_3**2) + C_m*w1_3) + 1.0e-14, -(-t1 + t2)*(-C_d*v1_2**2/sqrt(v1_1**2 + v1_2**2 + v1_3**2) - C_d*sqrt(v1_1**2 + v1_2**2 + v1_3**2)) - 0.99999999999999, -(-t1 + t2)*(-C_d*v1_2*v1_3/sqrt(v1_1**2 + v1_2**2 + v1_3**2) - C_m*w1_1) + 1.0e-14], [-(-t1 + t2)*(-C_d*v1_1*v1_3/sqrt(v1_1**2 + v1_2**2 + v1_3**2) - C_m*w1_2) + 1.0e-14, -(-t1 + t2)*(-C_d*v1_2*v1_3/sqrt(v1_1**2 + v1_2**2 + v1_3**2) + C_m*w1_1) + 1.0e-14, -(-t1 + t2)*(-C_d*v1_3**2/sqrt(v1_1**2 + v1_2**2 + v1_3**2) - C_d*sqrt(v1_1**2 + v1_2**2 + v1_3**2)) - 0.99999999999999]]), array([[1.0e-14, -C_m*v1_3*(-t1 + t2) + 1.0e-14, C_m*v1_2*(-t1 + t2) + 1.0e-14], [C_m*v1_3*(-t1 + t2) + 1.0e-14, 1.0e-14, -C_m*v1_1*(-t1 + t2) + 1.0e-14], [-C_m*v1_2*(-t1 + t2) + 1.0e-14, C_m*v1_1*(-t1 + t2) + 1.0e-14, 1.0e-14]]), array([[1.00000000000001, 1.0e-14, 1.0e-14], [1.0e-14, 1.00000000000001, 1.0e-14], [1.0e-14, 1.0e-14, 1.00000000000001]]),)

@numba.jit(cache=True,nopython=True)
def bounce_slide_vel_error(_Dummy_70, _Dummy_71, _Dummy_72, _Dummy_73):
    [v1_1, v1_2, v1_3] = _Dummy_70
    [w1_1, w1_2, w1_3] = _Dummy_71
    [v2_1, v2_2, v2_3] = _Dummy_72
    [mu, ez] = _Dummy_73
    return array([[-0.02*mu*w1_2*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) - v1_1*(-mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0) + v2_1 + 1.0e-14], [0.02*mu*w1_1*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) - v1_2*(-mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0) + v2_2 + 1.0e-14], [ez*v1_3 + v2_3 + 1.0e-14]])

@numba.jit(cache=True,nopython=True)
def bounce_slide_vel_jacobian(_Dummy_74, _Dummy_75, _Dummy_76, _Dummy_77):
    [v1_1, v1_2, v1_3] = _Dummy_74
    [w1_1, w1_2, w1_3] = _Dummy_75
    [v2_1, v2_2, v2_3] = _Dummy_76
    [mu, ez] = _Dummy_77
    return (array([[-1.0*mu*v1_1*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 0.02*mu*w1_2*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) - 0.99999999999999, -1.0*mu*v1_1*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 0.02*mu*w1_2*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.0e-14, mu*v1_1*(ez + 1)*sign(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) - 0.02*mu*w1_2*(ez + 1)*sign(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0e-14], [-1.0*mu*v1_2*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 0.02*mu*w1_1*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.0e-14, -1.0*mu*v1_2*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 0.02*mu*w1_1*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) - 0.99999999999999, mu*v1_2*(ez + 1)*sign(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 0.02*mu*w1_1*(ez + 1)*sign(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0e-14], [1.0e-14, 1.0e-14, ez + 1.0e-14]]), array([[-0.02*mu*v1_1*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 0.0004*mu*w1_2*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.0e-14, 0.02*mu*v1_1*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 0.0004*mu*w1_2*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 0.02*mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0e-14, 1.0e-14], [-0.02*mu*v1_2*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 0.0004*mu*w1_1*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 0.02*mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0e-14, 0.02*mu*v1_2*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 0.0004*mu*w1_1*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.0e-14, 1.0e-14], [1.0e-14, 1.0e-14, 1.0e-14]]), array([[1.00000000000001, 1.0e-14, 1.0e-14], [1.0e-14, 1.00000000000001, 1.0e-14], [1.0e-14, 1.0e-14, 1.00000000000001]]),)

@numba.jit(cache=True,nopython=True)
def bounce_slide_spin_error(_Dummy_78, _Dummy_79, _Dummy_80, _Dummy_81):
    [v1_1, v1_2, v1_3] = _Dummy_78
    [w1_1, w1_2, w1_3] = _Dummy_79
    [w2_1, w2_2, w2_3] = _Dummy_80
    [mu, ez] = _Dummy_81
    return array([[75.0*mu*v1_2*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) - w1_1*(-1.5*mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0) + w2_1 + 1.0e-14], [-75.0*mu*v1_1*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) - w1_2*(-1.5*mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0) + w2_2 + 1.0e-14], [-1.0*w1_3 + w2_3 + 1.0e-14]])

@numba.jit(cache=True,nopython=True)
def bounce_slide_spin_jacobian(_Dummy_82, _Dummy_83, _Dummy_84, _Dummy_85):
    [v1_1, v1_2, v1_3] = _Dummy_82
    [w1_1, w1_2, w1_3] = _Dummy_83
    [w2_1, w2_2, w2_3] = _Dummy_84
    [mu, ez] = _Dummy_85
    return (array([[-75.0*mu*v1_2*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 1.5*mu*w1_1*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.0e-14, -75.0*mu*v1_2*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 1.5*mu*w1_1*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 75.0*mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0e-14, 75.0*mu*v1_2*(ez + 1)*sign(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.5*mu*w1_1*(ez + 1)*sign(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0e-14], [75.0*mu*v1_1*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 1.5*mu*w1_2*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 75.0*mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0e-14, 75.0*mu*v1_1*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 1.5*mu*w1_2*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.0e-14, -75.0*mu*v1_1*(ez + 1)*sign(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.5*mu*w1_2*(ez + 1)*sign(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) + 1.0e-14], [1.0e-14, 1.0e-14, 1.0e-14]]), array([[-1.5*mu*v1_2*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 0.03*mu*w1_1*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.5*mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) - 0.99999999999999, 1.5*mu*v1_2*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 0.03*mu*w1_1*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.0e-14, 1.0e-14], [1.5*mu*v1_1*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) - 0.03*mu*w1_2*(ez + 1)*(v1_2 + 0.02*w1_1)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.0e-14, -1.5*mu*v1_1*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 0.03*mu*w1_2*(ez + 1)*(v1_1 - 0.02*w1_2)**1.0*abs(v1_3)/((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6)**(3/2) + 1.5*mu*(ez + 1)*abs(v1_3)/sqrt((v1_1 - 0.02*w1_2)**2.0 + (v1_2 + 0.02*w1_1)**2.0 + 1.0e-6) - 0.99999999999999, 1.0e-14], [1.0e-14, 1.0e-14, -1.0]]), array([[1.00000000000001, 1.0e-14, 1.0e-14], [1.0e-14, 1.00000000000001, 1.0e-14], [1.0e-14, 1.0e-14, 1.00000000000001]]),)

@numba.jit(cache=True,nopython=True)
def bounce_roll_vel_error(_Dummy_86, _Dummy_87, _Dummy_88, _Dummy_89):
    [v1_1, v1_2, v1_3] = _Dummy_86
    [w1_1, w1_2, w1_3] = _Dummy_87
    [v2_1, v2_2, v2_3] = _Dummy_88
    [mu, ez] = _Dummy_89
    return array([[-0.6*v1_1 + v2_1 - 0.008*w1_2 + 1.0e-14], [-0.6*v1_2 + v2_2 + 0.008*w1_1 + 1.0e-14], [ez*v1_3 + v2_3 + 1.0e-14]])

@numba.jit(cache=True,nopython=True)
def bounce_roll_vel_jacobian(_Dummy_90, _Dummy_91, _Dummy_92, _Dummy_93):
    [v1_1, v1_2, v1_3] = _Dummy_90
    [w1_1, w1_2, w1_3] = _Dummy_91
    [v2_1, v2_2, v2_3] = _Dummy_92
    [mu, ez] = _Dummy_93
    return (array([[-0.6, 1.0e-14, 1.0e-14], [1.0e-14, -0.6, 1.0e-14], [1.0e-14, 1.0e-14, ez + 1.0e-14]]), array([[1.0e-14, -0.008, 1.0e-14], [0.008, 1.0e-14, 1.0e-14], [1.0e-14, 1.0e-14, 1.0e-14]]), array([[1.00000000000001, 1.0e-14, 1.0e-14], [1.0e-14, 1.00000000000001, 1.0e-14], [1.0e-14, 1.0e-14, 1.00000000000001]]),)

@numba.jit(cache=True,nopython=True)
def bounce_roll_spin_error(_Dummy_94, _Dummy_95, _Dummy_96, _Dummy_97):
    [v1_1, v1_2, v1_3] = _Dummy_94
    [w1_1, w1_2, w1_3] = _Dummy_95
    [w2_1, w2_2, w2_3] = _Dummy_96
    [mu, ez] = _Dummy_97
    return array([[30.0*v1_2 - 0.4*w1_1 + w2_1 + 1.0e-14], [-30.0*v1_1 - 0.4*w1_2 + w2_2 + 1.0e-14], [-1.0*w1_3 + w2_3 + 1.0e-14]])

@numba.jit(cache=True,nopython=True)
def bounce_roll_spin_jacobian(_Dummy_98, _Dummy_99, _Dummy_100, _Dummy_101):
    [v1_1, v1_2, v1_3] = _Dummy_98
    [w1_1, w1_2, w1_3] = _Dummy_99
    [w2_1, w2_2, w2_3] = _Dummy_100
    [mu, ez] = _Dummy_101
    return (array([[1.0e-14, 30.0, 1.0e-14], [-30.0, 1.0e-14, 1.0e-14], [1.0e-14, 1.0e-14, 1.0e-14]]), array([[-0.4, 1.0e-14, 1.0e-14], [1.0e-14, -0.4, 1.0e-14], [1.0e-14, 1.0e-14, -1.0]]), array([[1.00000000000001, 1.0e-14, 1.0e-14], [1.0e-14, 1.00000000000001, 1.0e-14], [1.0e-14, 1.0e-14, 1.00000000000001]]),)

